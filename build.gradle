buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.hexomod:MacroPreprocessor:0.7"
    }
    configurations.all {
        resolutionStrategy {
            force 'org.ow2.asm:asm:6.0_BETA'
        }
    }
}

version = '1.5.1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    jcenter()
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

ext.include = ['api', 'core'].toSet()

//
subprojects { subproject ->
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'com.github.hexomod.macro.preprocessor'

    compileJava {
        options.compilerArgs << '-parameters'
    }

    idea {
        module {
            inheritOutputDirs = true
        }
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile "org.apache.logging.log4j:log4j-api:2.8.1"
        compile "org.apache.logging.log4j:log4j-core:2.8.1"

        testRuntime "org.apache.logging.log4j:log4j-api:2.8.1"
        testRuntime "org.apache.logging.log4j:log4j-core:2.8.1"
        compileOnly group: 'org.jetbrains', name: 'annotations', version: '22.0.0'
        testCompileOnly group: 'org.jetbrains', name: 'annotations', version: '22.0.0'
        //testRuntime('org.junit.jupiter:junit-jupiter-api:5.4.2')
        //testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')
    }

    ext.placeholders = [
            '@VERSION@' : project.version
    ]

    task replacePlaceholders(type: Copy) {
        from compileJava.source
        into "$buildDir/generated-placeholders"
        filter { line -> line.replaceAll('@VERSION@', subproject.version) }
    }
    compileJava.source = "$buildDir/generated-placeholders"
    compileJava.dependsOn(replacePlaceholders)

    macroPreprocessorSettings {
        verbose true
        vars = [ DEBUG: false ]
    }

    if (!include.contains(subproject.name)) {
        jar {
            from {
                subproject.configurations.extraLibs.collect {
                    it.isDirectory() ? it : zipTree(it).matching {
                        exclude 'META-INF/DEPENDENCIES'
                        exclude 'META-INF/NOTICE'
                        exclude 'META-INF/LICENSE'
                    }
                }
            }

            exclude '**/GuiTest.class'
            exclude '**/EventListener.class'

            duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        }
    }

    if (subproject.name != 'forge1710') {
        apply plugin: 'maven-publish'

        task sourcesJar(type: Jar, dependsOn: classes, group: 'build') {
            classifier = 'source'
            from compileJava.source
            if (!include.contains(project.name)) {
                from subproject.parent.subprojects.collect { proj ->
                    if (include.contains(proj.name)) {
                        proj.compileJava.source
                    } else {
                        compileJava.source
                    }
                }

                exclude '**/GuiTest.java'
                exclude '**/EventListener.java'

                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
        }

        artifacts {
            archives sourcesJar
            archives jar
        }

        if (!include.contains(project.name)) {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        artifact jar
                        artifact sourcesJar

                        pom {
                            groupId = subproject.group
                            name = subproject.name
                            description = 'The runtime library of GExt for MinecraftForge'
                            url = 'https://github.com/StannisMod/gext'
                            licenses {
                                license {
                                    name = 'The Apache License, Version 2.0'
                                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }
                            scm {
                                connection = 'scm:git:https://github.com/StannisMod/gext.git'
                                developerConnection = 'scm:git:git@github.com:https://github.com/StannisMod/gext.git'
                                url = 'https://github.com/StannisMod/gext.git'
                            }
                        }
                    }
                }
                repositories {
                    def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                    maven {
                        url = isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
                        credentials {
                            username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                            password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
                        }
                    }
                }
            }
        }

        signing {
            required { project.hasProperty("signing.keyId") }
            sign subproject.configurations.archives
        }
    }
}